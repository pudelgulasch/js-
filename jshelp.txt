Parenthesis ()

declare a variable - let a;
assign a variable - let a = "string";

variable++ equals var variable=variable+1
same with --/

mathematical operation and assignment
+=  or -= / *= / /=   f.e. myVar += 5 equals myVar = myVar + 5;

// increment +1, decrement -1 / Variablenänderung bleibt bestehen bei Weiterverwendug

var myStr = "I am a \"double quoted\" string inside \"double quotes\".";
if you use quotations inside a string 

\'	single quote \r	carriage return \t	tab \b	backspace
\"	double quote \\	backslash \n	newline \f	form feed

// When you create an object, JS saves it at a unique location in memory
// When you compare primitives, JS only cares about the value
// Comparing OBJECTS, we refer to REFERENCES - JS only cares about the reference in memory


---------------------ARRAY METHODS------------------------------

// + end
cities.push("Utrecht");
// - end //no args
cities.pop();
// - first 
cities.shift();
// + first
cities.unshift("Darsalaam");
// swap with bracket notation
cities[2] = "Skagen";
// take off from the anywhere and replaces 
// asianCities.splice(1, 2, "Beijing");

slive vs. splice
// var array=[1,2,3,4,5];
// console.log(array.splice(2));
// This will return [3,4,5]. The original array is affected resulting in array being [1,2].

// var array=[1,2,3,4,5]
// console.log(array.slice(2));
// This will return [3,4,5]. The original array is NOT affected with resulting in array being [1,2,3,4,5].

also reverse, toString, numbers.sort((a, b) => a - b);

// new ES6 with spread syntax to concatenate arrays
const worldCities = [...africanCities, ...africanCities];

let aVariable = "five hundred";
console.log(isNaN(aVariable));

// To check if something is an array
// console.log(Array.isArray("Hot"));

---------------------MATH------------------------------

rgb calculator
let r = Math.floor(Math.random() * 256);
let g = Math.floor(Math.random() * 256);
let b = Math.floor(Math.random() * 256);
console.log(`r = ${r} - g = ${g} - b = ${b}`);

// random number till 5
let r = Math.floor(Math.random() * 5 + 1);

---------------------LOOP------------------------------

// to check if a string is empty, "else if" is nessesary
function isEmpty(s) {
  if (s === "") {
    return true;
  } else if (s != "") {
    return false;
  }
}

// let x = 0;

// switch (x) {
//   case 0:
//     // value of variable
//     state = "OFF";
//     break;
//   case 1:
//     state = "ON";
//     break;
//   // breaks out of
//   default:
//     state = "Stateless";
// }

---------------------OBJECT------------------------------

const today = new Date(); //object, concat with .getDay etc.

---------------------FUNCTION EXCERCISES-----------------

// Factorial Function
// 5 != 1 * 2 * 3 * 4 * 5;

// function factorial(n) {
//   if (n == 0 || n == 1) {
//     return 1;
//   }
//   return factorial(n - 1) * n;
// }
// console.log(factorial(3));

// or in a loop
// function factorial2(n) {
//   j = 1;
//   for (i = 1; i <= n; i++) {
//     // j *= i; code standard
//     j = j * i;
//   }
//   return j;
// }
// console.log(factorial2(4));
// 1*4=4; 2*4=8; 3*8=24; i starts counting at 1; 3 is smaller or equal to 4  so it stops;

// function factorial(n) {
//   return n != 1 ? n * factorial(n - 1) : 1;
// }
// console.log(factorial(2));


[] object
{} array

for of loop takes the values, so 1.score->value, 2.score->value etc.
let scoreMax = 0;
for (let i of score) {
  scoreMax += i.score;
}
console.log(scoreMax);

var can only be declared once, and can be overwritten globally + locally from functions (z.B. i)
using the const declaration only prevents reassignment of the variable identifier.

Object.freeze(obj); to ensure not reassignment

https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics

https://bitsofco.de/for-in-vs-for-of/

https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Array

However, it is generally advised that for..in not be used with Arrays, particularly because it cannot 
be guaranteed that the iteration happens in sequence, which is usually important for Arrays.

enumerable - zählbar
iterable - wiederholbar

The for..of loop works well with Arrays and Strings, as they are iterable. 
This method is a more reliable way of looping through an Array in sequence.

for in property names
for of property values

item,id,array

let scores = [
  { tile: "N", score: 1 },
  { tile: "K", score: 5 },
  { tile: "Z", score: 10 },
  { tile: "X", score: 8 },
  { tile: "D", score: 2 },
  { tile: "A", score: 1 },
  { tile: "E", score: 1 }
];

let scoreMax = 0;
for (let i of scores) {
  scoreMax += i.score;
}
console.log(scoreMax);

// const myHouse1 = {color: "blue"}; // memory address 1
// const myHouse2 = myHouse1; // memory address 1

// RegExp to find digits in a string, zum Beispiel \d finds a digit from 0-9
let x = /\d/;
// You can use a replace regular expression.

// s/[;,\t\r ]|[\n]{2}/\n/g
// s/ at the beginning means a search
// The characters between [ and ] are the characters to search for (in any order)
// The second / delimits the search-for text and the replace text
// In English, this reads:

// "Search for ; or , or \t or \r or  (space) or exactly two sequential \n and replace it with \n"

// In C#, you could do the following: (after importing System.Text.RegularExpressions)

// Regex pattern = new Regex("[;,\t\r ]|[\n]{2}");
// pattern.Replace(myString, "\n");

const isSymmetrical = num => num.toString().split("").reverse().join("") == num;

console.log(isSymmetrical(1112111));

A parameter is the variable which is part of the method’s signature (method declaration). 
n argument is an expression used when calling the method.